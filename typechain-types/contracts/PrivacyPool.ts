/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface PrivacyPoolInterface extends utils.Interface {
  functions: {
    "generatePrivacyNote(address,uint256,bytes32)": FunctionFragment;
    "privacyNotes(bytes32)": FunctionFragment;
    "redeemNote(bytes32,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "generatePrivacyNote"
      | "privacyNotes"
      | "redeemNote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "generatePrivacyNote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "privacyNotes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemNote",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "generatePrivacyNote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privacyNotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemNote", data: BytesLike): Result;

  events: {
    "NoteGenerated(bytes32,address,uint256)": EventFragment;
    "NoteRedeemed(bytes32,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NoteGenerated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NoteRedeemed"): EventFragment;
}

export interface NoteGeneratedEventObject {
  secretHash: string;
  tokenAddress: string;
  amount: BigNumber;
}
export type NoteGeneratedEvent = TypedEvent<
  [string, string, BigNumber],
  NoteGeneratedEventObject
>;

export type NoteGeneratedEventFilter = TypedEventFilter<NoteGeneratedEvent>;

export interface NoteRedeemedEventObject {
  secretHash: string;
  tokenAddress: string;
  recipient: string;
  amount: BigNumber;
}
export type NoteRedeemedEvent = TypedEvent<
  [string, string, string, BigNumber],
  NoteRedeemedEventObject
>;

export type NoteRedeemedEventFilter = TypedEventFilter<NoteRedeemedEvent>;

export interface PrivacyPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PrivacyPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    generatePrivacyNote(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _secretHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    privacyNotes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { tokenAddress: string; amount: BigNumber }
    >;

    redeemNote(
      _secretHash: PromiseOrValue<BytesLike>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  generatePrivacyNote(
    _tokenAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _secretHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  privacyNotes(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { tokenAddress: string; amount: BigNumber }>;

  redeemNote(
    _secretHash: PromiseOrValue<BytesLike>,
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    generatePrivacyNote(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _secretHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    privacyNotes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { tokenAddress: string; amount: BigNumber }
    >;

    redeemNote(
      _secretHash: PromiseOrValue<BytesLike>,
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NoteGenerated(bytes32,address,uint256)"(
      secretHash?: PromiseOrValue<BytesLike> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): NoteGeneratedEventFilter;
    NoteGenerated(
      secretHash?: PromiseOrValue<BytesLike> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): NoteGeneratedEventFilter;

    "NoteRedeemed(bytes32,address,address,uint256)"(
      secretHash?: PromiseOrValue<BytesLike> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null
    ): NoteRedeemedEventFilter;
    NoteRedeemed(
      secretHash?: PromiseOrValue<BytesLike> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null
    ): NoteRedeemedEventFilter;
  };

  estimateGas: {
    generatePrivacyNote(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _secretHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    privacyNotes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemNote(
      _secretHash: PromiseOrValue<BytesLike>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    generatePrivacyNote(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _secretHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    privacyNotes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemNote(
      _secretHash: PromiseOrValue<BytesLike>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
